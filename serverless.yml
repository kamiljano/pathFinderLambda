service: pathFinder

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  versionFunctions: false
  stage: dev

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
         - Ref: NotificationSNSTopic
    - Effect: "Allow"
      Action:
        - "sqs:sendMessageBatch"
      Resource:
        Fn::GetAtt: [ JobQueue, Arn ]

# you can define service wide environment variables here
  environment:
    MAX_IPS_TO_SCAN_PER_INSTANCE: 25000
    MAX_JOBS_TO_CREATE: 10000
    DB_NAME: ${self:custom.dbName}
    DB_USER: ${self:custom.dbUser}
    DB_PASSWORD: ${self:custom.dbUser}
    DB_ADDRESS:
      Fn::GetAtt: [ WebCache, Endpoint.Address ]
    DB_PORT:
      Fn::GetAtt: [ WebCache, Endpoint.Port ]
    JOB_QUEUE:
      Ref: JobQueue

package:
  include:
    - package.json
    - package-lock.json
    - jobExecutor.js
    - gateway.js
    - dbInit.js
    - lib/**

custom:
  dbName: ${opt:dbname, 'pathfinder'}
  dbUser: ${opt:dbuser, 'root'}
  dbPassword: ${opt:dbpassword, 'SecretRootPassword'}
  dbPublic: ${opt:dbpublic, 'true'}

functions:
  jobExecutor:
    handler: jobExecutor.execute
    memorySize: 192
    timeout: 300
    vpc:
      securityGroupIds:
        - Ref: VpcSecurityGroup
      subnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
    environment:
      NOTIFICATION_SNS_TOPIC:
        Ref: NotificationSNSTopic
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [ JobQueue, Arn ]
  find:
    handler: gateway.find
    timeout: 10
    memorySize: 128
    vpc:
      securityGroupIds:
        - Ref: VpcSecurityGroup
      subnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
    events:
      - http:
          path: /find
          method: post
          request:
            parameters:
              querystrings:
                path: true
                from: true
                to: true
                regex: false

# you can add CloudFormation resource templates here
resources:
  Resources:
    NotificationSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: matching-path-found
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600
        QueueName: ${self:provider.stage}-http-path-search-jobs
        VisibilityTimeout: 300
    JobQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties: 
        PolicyDocument: 
          Id: JobQueuePolicy
          Statement:
            Effect: Allow
            Principal: "*"
            Action: 
              - "sqs:SendMessage"
              - "sqs:deleteMessage"
              - "sqs:getQueueUrl"
              - "sqs:receiveMessage"
            Resource: "*"
        Queues:
          - Ref: JobQueue

    WebCache:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: ${self:custom.dbName}
        DBInstanceIdentifier: pathfinder2-${self:provider.stage}
        AllocatedStorage: '5'
        DBInstanceClass: db.t2.medium
        Engine: MySQL
        MasterUsername: ${self:custom.dbUser}
        MasterUserPassword: ${self:custom.dbPassword}
        PubliclyAccessible: ${self:custom.dbPublic}
        MultiAZ: true
        Port: 3306
        DBSubnetGroupName:
          Ref:
            DbSubnetGroup
        VPCSecurityGroups:
          - Ref:
              VpcSecurityGroup
      DeletionPolicy: Delete

    DbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for database access"
        SubnetIds:
          - Ref:
              SubnetA
          - Ref:
              SubnetB

    SubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.4.0/24
        AvailabilityZone: ${self:provider.region}a
        VpcId:
          Ref: BackendVpc

    SubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.3.0/24
        AvailabilityZone: ${self:provider.region}b
        VpcId:
          Ref: BackendVpc

    BackendVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16

    VpcSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS DB Instance."
        VpcId:
          Ref: BackendVpc
  Outputs:
    NotificationSNSTopic:
      Description: "SNS topic that the events will be published to, once a matching response is found"
      Value:
        Ref: NotificationSNSTopic
    JobQueue:
      Description: "SQS queue that contains all the search jobs to be done"
      Value:
        Ref: JobQueue
    DatabaseId:
      Description: "Database ID"
      Value:
        Ref: WebCache
    DatabaseHost:
      Description: "Database Host"
      Value:
        Fn::GetAtt: [ WebCache, Endpoint.Address ]
    DatabasePort:
      Description: "Database port"
      Value:
        Fn::GetAtt: [ WebCache, Endpoint.Port ]